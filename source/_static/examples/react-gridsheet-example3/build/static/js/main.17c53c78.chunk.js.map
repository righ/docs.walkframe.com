{"version":3,"sources":["App.tsx","index.tsx"],"names":["ListRenderer","value","map","v","i","Array","isArray","join","toString","Renderer","ListParser","parseFunctions","parseArray","split","Parser","App","React","data","tsv","setTsv","className","options","headerHeight","cells","default","width","height","A","style","textAlign","C","D","renderer","parser","renderers","list","parsers","onSave","matrix","filtered","filter","row","slice","matrix2tsv","onChange","cellsOption","console","log","aa2oa","placeholder","minHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAWMA,E,2JACJ,SAAMC,GACJ,OACE,6BACGA,EAAMC,KAAI,SAACC,EAAGC,GAAJ,OACT,6BAAaD,GAAJC,U,uBAKjB,SAAUH,GACR,OAAII,MAAMC,QAAQL,GACTA,EAAMM,KAAK,OAER,OAALN,QAAK,IAALA,OAAA,EAAAA,EAAOO,aAAc,O,GAdLC,KAkBrBC,E,4MACJC,eAAiB,CAAC,EAAKC,Y,gDACvB,SAAWX,GACT,OAAOA,EAAMY,MAAM,W,GAHEC,KAOV,SAASC,IAAO,IAAD,EACbC,WAA2B,CACxC,EAAC,EAAM,SAAU,kBAAmB,CAAC,aAAc,aACnD,EAAC,EAAM,OAAQ,mBAAoB,CAAC,UACpC,EAAC,EAAM,SAAU,SAAU,CAAC,SAC5B,EAAC,EAAM,QAAS,eAAgB,CAAC,iBACjC,EAAC,EAAM,OAAQ,sBAAuB,CAAC,mBALlCC,EADqB,sBAQND,WAAe,IART,mBAQrBE,EARqB,KAQhBC,EARgB,KAU5B,OACE,sBAAKC,UAAU,MAAf,UACE,6CACA,cAAC,IAAD,CACEH,KAAMA,EACNI,QAAS,CACPC,aAAc,GACdC,MAAO,CACLC,QAAS,CAAEC,MAAO,IAAKC,OAAQ,IAC/BC,EAAG,CAAEF,MAAO,GAAIG,MAAO,CAAEC,UAAW,WACpCC,EAAG,CAAEL,MAAO,KACZM,EAAG,CAAEN,MAAO,IAAKO,SAAU,OAAQC,OAAQ,SAE7CC,UAAW,CACTC,KAAM,IAAInC,GAEZoC,QAAS,CACPD,KAAM,IAAIzB,GAEZ2B,OAAQ,SAACC,GACP,GAAc,MAAVA,EAAJ,CAGA,IAAMC,EAAWD,EACdE,QAAO,SAACC,GAAD,OAASA,EAAI,MACpBvC,KAAI,SAACuC,GAAD,OAASA,EAAIC,MAAM,MAC1BvB,EAAOwB,YAAWJ,MAEpBK,SAAU,SAACN,EAAQO,GACH,MAAVP,GACFQ,QAAQC,IACN,iBACAT,GAAUU,YAAMV,EAAQ,CAAC,OAAQ,aAAc,UAGhC,MAAfO,GACFC,QAAQC,IAAI,wBAAyBF,OAK7C,wDACA,0BACEI,YAAY,gCACZhD,MAAOiB,EACPU,MAAO,CAAEH,MAAO,OAAQyB,UAAW,cCtF3CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,e","file":"static/js/main.17c53c78.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  GridSheet,\n  Renderer,\n  Parser,\n  MatrixType,\n  matrix2tsv,\n  aa2oa\n} from \"react-gridsheet\";\nimport \"./App.css\";\n\nclass ListRenderer extends Renderer {\n  array(value: any[]) {\n    return (\n      <ul>\n        {value.map((v, i) => (\n          <li key={i}>{v}</li>\n        ))}\n      </ul>\n    );\n  }\n  stringify(value: any): string {\n    if (Array.isArray(value)) {\n      return value.join(\"\\n\");\n    }\n    return value?.toString() || \"\";\n  }\n}\n\nclass ListParser extends Parser {\n  parseFunctions = [this.parseArray];\n  parseArray(value: string): any[] {\n    return value.split(/\\n/g);\n  }\n}\n\nexport default function App() {\n  const [data] = React.useState<MatrixType>([\n    [true, \"Ichiro\", \"Baseball player\", [\"Curry Rice\", \"Baseball\"]],\n    [true, \"Jiro\", \"Ramen shop owner\", [\"Ramen\"]],\n    [true, \"Saburo\", \"Singer\", [\"Song\"]],\n    [true, \"Shiro\", \"Sword master\", [\"Christianity\"]],\n    [true, \"Goro\", \"Solo proprietorship\", [\"Eating alone\"]]\n  ]);\n  const [tsv, setTsv] = React.useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <h1>Sloppy data</h1>\n      <GridSheet\n        data={data}\n        options={{\n          headerHeight: 30,\n          cells: {\n            default: { width: 200, height: 50 },\n            A: { width: 50, style: { textAlign: \"center\" } },\n            C: { width: 200 },\n            D: { width: 400, renderer: \"list\", parser: \"list\" }\n          },\n          renderers: {\n            list: new ListRenderer()\n          },\n          parsers: {\n            list: new ListParser()\n          },\n          onSave: (matrix) => {\n            if (matrix == null) {\n              return;\n            }\n            const filtered = matrix\n              .filter((row) => row[0])\n              .map((row) => row.slice(1));\n            setTsv(matrix2tsv(filtered));\n          },\n          onChange: (matrix, cellsOption) => {\n            if (matrix != null) {\n              console.log(\n                \"data onchange:\",\n                matrix && aa2oa(matrix, [\"name\", \"occupation\", \"memo\"])\n              );\n            }\n            if (cellsOption != null) {\n              console.log(\"cellsOption onchange:\", cellsOption);\n            }\n          }\n        }}\n      />\n      <p>TSV: (Ctrl+s to update)</p>\n      <textarea\n        placeholder=\"Inactive rows will be ommited\"\n        value={tsv}\n        style={{ width: \"100%\", minHeight: \"200px\" }}\n      ></textarea>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('example3')\n);\n"],"sourceRoot":""}